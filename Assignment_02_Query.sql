USE Assingment_DB
--CREATING TABLES 

CREATE TABLE LOCATION
(LOCATION_ID INT PRIMARY KEY,
CITY VARCHAR(100)
)

INSERT INTO LOCATION
(LOCATION_ID,CITY)
SELECT 122,'New York' UNION ALL
SELECT 123, 'Dallas' UNION ALL
SELECT 124, 'Chicago' UNION ALL
SELECT 167, 'Boston'

CREATE TABLE DEPARTMENT
(DEPARTMENT_ID INT PRIMARY KEY,
D_NAME VARCHAR(100),
LOCATION_ID INT FOREIGN KEY REFERENCES LOCATION(LOCATION_ID)
)

INSERT INTO DEPARTMENT
(DEPARTMENT_ID,
D_NAME,
LOCATION_ID)
SELECT 10, 'Accounting',122 UNION ALL
SELECT 20, 'Sales', 124 UNION ALL
SELECT 30 ,'Research' ,123 UNION ALL
SELECT 40, 'Operations', 167

CREATE TABLE JOB
(JOB_ID INT PRIMARY KEY,
DESIGNATION VARCHAR(100)
)

INSERT INTO JOB
(JOB_ID,
DESIGNATION
)
SELECT 667, 'Clerk' UNION ALL
SELECT 668, 'Staff' UNION ALL
SELECT 669,'Analyst' UNION ALL
SELECT 670, 'Sales Person' UNION ALL
SELECT 671, 'Manager' UNION ALL
SELECT 672, 'President'


SELECT * FROM JOB

CREATE TABLE EMPLOYEE
(EMPLOYEE_ID INT,
LAST_NAME VARCHAR(100),
FIRST_NAME VARCHAR(100),
MIDDLE_NAME VARCHAR(100),
JOB_ID INT FOREIGN KEY REFERENCES JOB(JOB_ID),
MANAGER_ID INT,
[HIRE-DATE] DATE, 
SALARY INT,
COMM INT,
DEPARTMENT_ID INT FOREIGN KEY REFERENCES DEPARTMENT(DEPARTMENT_ID)
)

INSERT INTO EMPLOYEE
(EMPLOYEE_ID,LAST_NAME,FIRST_NAME,MIDDLE_NAME,JOB_ID,MANAGER_ID,[HIRE-DATE],SALARY,COMM,DEPARTMENT_ID)
SELECT 7369, 'SMITH' ,'JOHN','Q', 667, 7902,'1984-12-17' ,800, NULL ,20 UNION ALL
SELECT 7499, 'ALLEN' ,'KEVIN','J', 670, 7698,'1985-02-20' ,1600,300 ,30 UNION ALL
SELECT 7505, 'DOYLE' ,'JEAN','K', 671, 7839,'1985-04-04' ,2850, NULL ,30 UNION ALL
SELECT 7506, 'DENNIS' ,'LYNN','S', 671, 7839,'1985-05-15' ,2750,NULL ,30 UNION ALL
SELECT 7507, 'BAKER' ,'LESLIE','D',671, 7839,'1985-06-10' ,2200,NULL ,40 UNION ALL
SELECT 7521, 'WARK' ,'CYNTHIA', 'D' ,670, 7698,'1985-02-22' ,1250,500 ,30

SELECT * FROM EMPLOYEE

--SIMPLE QUERIES 

--01  LIST OUT THE FIRSTNAME, LASTNAME, SALARY, COMMISSION FOR ALL EMPLOYEES.
SELECT FIRST_NAME,LAST_NAME,SALARY,COMM
FROM EMPLOYEE


--02 LIST OUT EMPLOYEEID,LAST NAME, DEPARTMENT ID FOR ALL EMPLOYEES AND ALIAS 
--EMPLOYEEID AS "ID OF THE EMPLOYEE", LAST NAME AS "NAME OF THE EMPLOYEE", 
--DEPARTMENTID AS "DEP_ID".

SELECT EMPLOYEE_ID AS ID_OF_THE_EMPLOYEE,LAST_NAME AS NAME_OF_THE_EMPLOYEE,DEPARTMENT_ID AS DEP_ID
FROM EMPLOYEE


--03 . LIST OUT THE EMPLOYEES ANNUAL SALARY WITH THEIR NAMES ONLY.

SELECT FIRST_NAME AS NAME, SALARY 
FROM EMPLOYEE


--WHERE CONDITION 

--01 LIST THE DETAILS ABOUT "SMITH

SELECT * 
FROM EMPLOYEE
WHERE LAST_NAME='SMITH'

--02 LIST OUT THE EMPLOYEES WHO ARE WORKING IN DEPARTMENT 20.
SELECT * 
FROM EMPLOYEE
WHERE DEPARTMENT_ID =20

--03 LIST OUT THE EMPLOYEES WHO ARE EARNING SALARY BETWEEN 3000 AND 4500.

SELECT * 
FROM EMPLOYEE
WHERE SALARY BETWEEN 3000 AND 4500

--04 LIST OUT THE EMPLOYEES WHO ARE WORKING IN DEPARTMENT 10 OR 20.

SELECT * 
FROM EMPLOYEE
WHERE DEPARTMENT_ID=10 OR DEPARTMENT_ID=20

--05 FIND OUT THE EMPLOYEES WHO ARE NOT WORKING IN DEPARTMENT 10 OR 30.

SELECT * 
FROM EMPLOYEE
WHERE DEPARTMENT_ID= 10 OR DEPARTMENT_ID=30

--06 LIST OUT THE EMPLOYEES WHOSE NAME STARTS WITH 'S'

SELECT * 
FROM EMPLOYEE
WHERE LAST_NAME LIKE 'S%'

--07 LIST OUT THE EMPLOYEES WHOSE NAME STARTS WITH 'S' AND ENDS WITH 'H'

SELECT * 
FROM EMPLOYEE
WHERE LAST_NAME LIKE 'S%' AND LAST_NAME LIKE '%H'

--08 LIST OUT THE EMPLOYEES WHOSE NAME LENGTH IS 4 AND START WITH 'S'.

SELECT * 
FROM EMPLOYEE
WHERE LEN(LAST_NAME)=4 AND  LAST_NAME LIKE 'S%'

--09 LIST OUT EMPLOYEES WHO ARE WORKING IN DEPARRTMENT 10 AND DRAW THE 
--SALARIES MORE THAN 3500.
SELECT * 
FROM EMPLOYEE
WHERE DEPARTMENT_ID=10 AND SALARY>3500

--10  LIST OUT THE EMPLOYEES WHO ARE NOT RECEVING COMMISSION

SELECT * 
FROM EMPLOYEE
WHERE COMM IS NULL

--ORDER BY 

--01 LIST OUT THE EMPLOYEE ID, LAST NAME IN ASCENDING ORDER BASED ON THE EMPLOYEE ID.

SELECT EMPLOYEE_ID,LAST_NAME
FROM EMPLOYEE
ORDER BY EMPLOYEE_ID

--02 LIST OUT THE EMPLOYEE ID, NAME IN DESCENDING ORDER BASED ON SALARY

SELECT EMPLOYEE_ID,LAST_NAME
FROM EMPLOYEE
ORDER BY SALARY DESC

--03 LIST OUT THE EMPLOYEE DETAILS ACCORDING TO THEIR LAST-NAME IN ASCENDING ORDER AND 
--THEN ON DEPARTMENT_ID IN DESCENDING ORDER

SELECT *
FROM EMPLOYEE
ORDER BY LAST_NAME,DEPARTMENT_ID DESC

--GROUP BY & HAVING CLAUSE

--01 HOW MANY EMPLOYEES WHO ARE IN DIFFERENT DEPARTMENTS WISE IN THE ORGANIZATION.

SELECT * FROM EMPLOYEE

SELECT COUNT(EMPLOYEE_ID) AS numberofemployee,DEPARTMENT_ID
FROM EMPLOYEE
GROUP BY DEPARTMENT_ID
HAVING COUNT(EMPLOYEE_ID) >0
ORDER BY numberofemployee DESC

--02 LIST OUT THE DEPARTMENT WISE MAXIMUM SALARY, MINIMUM SALARY, AVERAGE SALARY OF 
--THE EMPLOYEES

SELECT DEPARTMENT_ID,MAX(SALARY) AS max_salary,MIN(SALARY) AS min_salary,AVG(SALARY) AS avg_salary 
FROM EMPLOYEE
GROUP BY DEPARTMENT_ID
ORDER BY max_salary DESC

--03 LIST OUT JOB WISE MAXIMUM SALARY, MINIMUM SALARY, AVERAGE SALARIES OF THE 
--EMPLOYEES.

SELECT JOB_ID,MAX(SALARY) AS max_salary,MIN(SALARY) AS min_salary,AVG(SALARY) AS avg_salary 
FROM EMPLOYEE
GROUP BY JOB_ID
ORDER BY max_salary DESC

--04 LIST OUT THE NUMBER OF EMPLOYEES JOINED IN EVERY MONTH IN ASCENDING ORDER
SELECT * FROM EMPLOYEE

SELECT COUNT(EMPLOYEE_ID) AS employees_hired,DATEPART(MONTH,[HIRE-DATE]) AS monthOfhire
FROM EMPLOYEE
GROUP BY DATEPART(MONTH,[HIRE-DATE])
ORDER BY monthOfhire 

--05 LIST OUT THE NUMBER OF EMPLOYEES FOR EACH MONTH AND YEAR, IN THE ASCENDING 
--ORDER BASED ON THE YEAR, MONTH.

SELECT COUNT(EMPLOYEE_ID) AS employees_hired, DATEPART(MONTH,[HIRE-DATE]) AS month_hired,DATEPART(YEAR,[HIRE-DATE]) AS year_hired
FROM EMPLOYEE
GROUP BY DATEPART(MONTH,[HIRE-DATE]),DATEPART(YEAR,[HIRE-DATE])
ORDER BY year_hired,month_hired

--06  LIST OUT THE DEPARTMENT ID HAVING ATLEAST FOUR EMPLOYEES

SELECT DEPARTMENT_ID,COUNT(EMPLOYEE_ID) AS numberofemp
FROM EMPLOYEE
GROUP BY DEPARTMENT_ID
HAVING COUNT(EMPLOYEE_ID)>=4

--07 HOW MANY EMPLOYEES JOINED IN JANUARY MONTH.

SELECT DATEPART(MONTH,[HIRE-DATE]) AS month_hired,COUNT(EMPLOYEE_ID) AS numberofemphired
FROM EMPLOYEE
GROUP BY DATEPART(MONTH,[HIRE-DATE])
HAVING DATEPART(MONTH,[HIRE-DATE])=9

--08 HOW MANY EMPLOYEES JOINED IN JANUARY OR SEPTEMBER MONT

SELECT COUNT(EMPLOYEE_ID) AS emp_joined,DATEPART(MONTH,[HIRE-DATE]) AS monthhired 
FROM EMPLOYEE
GROUP BY DATEPART(MONTH,[HIRE-DATE])
HAVING DATEPART(MONTH,[HIRE-DATE])=1 OR DATEPART(MONTH,[HIRE-DATE])=9

--09 HOW MANY EMPLOYEES WERE JOINED IN 1985

SELECT COUNT(EMPLOYEE_ID) AS numberofemp,DATEPART(YEAR,[HIRE-DATE]) AS yearhired
FROM EMPLOYEE
GROUP BY DATEPART(YEAR,[HIRE-DATE])
HAVING DATEPART(YEAR,[HIRE-DATE])=1985

--10  HOW MANY EMPLOYEES WERE JOINED EACH MONTH IN 1985

SELECT COUNT(EMPLOYEE_ID) AS numberofemp,DATEPART(MONTH,[HIRE-DATE]) AS monthhired,DATEPART(YEAR,[HIRE-DATE]) AS yearhired
FROM EMPLOYEE
GROUP BY DATEPART(YEAR,[HIRE-DATE]),DATEPART(MONTH,[HIRE-DATE])
HAVING DATEPART(YEAR,[HIRE-DATE])=1985

--11 HOW MANY EMPLOYEES WERE JOINED IN MARCH 1985?

SELECT COUNT(EMPLOYEE_ID) AS countofemp,DATEPART(MONTH,[HIRE-DATE]) AS month_hired,DATEPART(YEAR,[HIRE-DATE]) AS year_hired
FROM EMPLOYEE
GROUP BY DATEPART(MONTH,[HIRE-DATE]),DATEPART(YEAR,[HIRE-DATE]) 
HAVING DATEPART(MONTH,[HIRE-DATE])=2 AND DATEPART(YEAR,[HIRE-DATE]) =1985

--12 . WHICH IS THE DEPARTMENT ID, HAVING GREATER THAN OR EQUAL TO 3 EMPLOYEES JOINED IN 
--APRIL 1985?

SELECT DEPARTMENT_ID,COUNT(EMPLOYEE_ID) AS numberofemp,DATEPART(MONTH,[HIRE-DATE]) AS month_hired
		,DATEPART(YEAR,[HIRE-DATE]) AS year_hired 
FROM EMPLOYEE
GROUP BY DEPARTMENT_ID,DATEPART(MONTH,[HIRE-DATE]),DATEPART(YEAR,[HIRE-DATE])
HAVING COUNT(EMPLOYEE_ID)>=1 AND DATEPART(MONTH,[HIRE-DATE])=2 AND DATEPART(YEAR,[HIRE-DATE]) =1985


--JOINS

--01 LIST OUT EMPLOYEES WITH THEIR DEPARTMENT NAMES.

SELECT emp.first_name,emp.last_name,dept.D_name
FROM EMPLOYEE AS emp
INNER JOIN DEPARTMENT AS dept ON dept.DEPARTMENT_ID =emp.DEPARTMENT_ID

--02 DISPLAY EMPLOYEES WITH THEIR DESIGNATIONS

SELECT emp.first_name,emp.last_name,j.designation
FROM EMPLOYEE AS emp
INNER JOIN JOB AS j ON j.JOB_ID=emp.JOB_ID

--03 DISPLAY THE EMPLOYEES WITH THEIR DEPARTMENT NAMES AND REGIONAL GROUPS


SELECT emp.FIRST_NAME,emp.LAST_NAME,dept.D_NAME
FROM EMPLOYEE AS emp
INNER JOIN DEPARTMENT AS dept ON dept.DEPARTMENT_ID=emp.DEPARTMENT_ID

--04 HOW MANY EMPLOYEES WHO ARE WORKING IN DIFFERENT DEPARTMENTS AND DISPLAY WITH 
--DEPARTMENT NAMES.

SELECT dept.D_NAME AS DEPT_NAME,COUNT(emp.employee_id) AS numberofemp
FROM EMPLOYEE AS emp
INNER JOIN DEPARTMENT AS dept ON dept.DEPARTMENT_ID=EMP.DEPARTMENT_ID
GROUP BY dept.D_NAME
ORDER BY numberofemp DESC

--05 HOW MANY EMPLOYEES WHO ARE WORKING IN SALES DEPARTMENT

SELECT dept.D_NAME AS dept_name,COUNT(emp.EMPLOYEE_ID) AS numberofemp
FROM EMPLOYEE AS emp
INNER JOIN DEPARTMENT AS dept ON dept.DEPARTMENT_ID=emp.DEPARTMENT_ID
WHERE dept.D_NAME='SALES'
GROUP BY dept.D_NAME

--06 WHICH IS THE DEPARTMENT HAVING GREATER THAN OR EQUAL TO 5
 --EMPLOYEES AND DISPLAY THE DEPARTMENT NAMES IN ASCENDING ORDER

 SELECT dept.D_NAME AS dept_name,COUNT(emp.EMPLOYEE_ID) AS numberofemp
 FROM EMPLOYEE AS emp
 INNER JOIN DEPARTMENT AS dept ON dept.DEPARTMENT_ID=emp.DEPARTMENT_ID
 GROUP BY dept.D_NAME
 HAVING COUNT(emp.EMPLOYEE_ID)>=3

 --07 HOW MANY JOBS IN THE ORGANIZATION WITH DESIGNATIONS.

 SELECT J.DESIGNATION AS designation, COUNT(emp.EMPLOYEE_ID) AS numberofemp
 FROM EMPLOYEE AS emp
 INNER JOIN JOB AS J ON J.JOB_ID=EMP.JOB_ID
 GROUP BY J.DESIGNATION 
 ORDER BY numberofemp DESC

 --08  HOW MANY EMPLOYEES ARE WORKING IN "NEW YORK".
 SELECT COUNT(emp.EMPLOYEE_ID) AS numberofemp,loc.CITY AS location, dept.DEPARTMENT_ID
 FROM DEPARTMENT AS dept
 INNER JOIN LOCATION AS loc ON loc.LOCATION_ID=dept.LOCATION_ID
 INNER JOIN EMPLOYEE AS emp ON emp.DEPARTMENT_ID=dept.DEPARTMENT_ID
 GROUP BY loc.CITY,dept.DEPARTMENT_ID

 --09 DISPLAY THE EMPLOYEE DETAILS WITH SALARY GRADES

 SELECT SALARY FROM EMPLOYEE

 SELECT emp.first_name,emp.last_name,dept.D_NAME,J.DESIGNATION,
		CASE WHEN SALARY<1000 THEN 'LESS THAN 1000'
		WHEN SALARY>1000 AND SALARY <2000 THEN '1000 TO 2000'
		WHEN SALARY>2000 AND SALARY<3000 THEN '>2000'END AS salary_grade
FROM EMPLOYEE AS emp
INNER JOIN DEPARTMENT AS dept ON dept.DEPARTMENT_ID=emp.DEPARTMENT_ID
INNER JOIN JOB AS J ON J.JOB_ID=emp.JOB_ID

--10 LIST OUT THE NO. OF EMPLOYEES ON GRADE WISE.
SELECT COUNT(emp.EMPLOYEE_ID) AS numberofemp,J.DESIGNATION AS grade 
FROM EMPLOYEE AS emp
INNER JOIN JOB AS J ON J.JOB_ID=EMP.JOB_ID
GROUP BY J.DESIGNATION

--11 DISPLAY THE EMPLOYEE SALARY GRADES AND NO. OF EMPLOYEES BETWEEN 2000 TO 
--5000 RANGE OF SALARY

SELECT COUNT(emp.EMPLOYEE_ID) AS number0femp
	,CASE WHEN emp.SALARY <2000 THEN '<2000'
	WHEN emp.SALARY>2000 AND emp.SALARY<5000 THEN 'BETWEEN 2000 TO 5000' END AS SALARY_GRADE
FROM EMPLOYEE AS emp
GROUP BY CASE WHEN emp.SALARY <2000 THEN '<2000'
	WHEN emp.SALARY>2000 AND emp.SALARY<5000 THEN 'BETWEEN 2000 TO 5000' END

--12  DISPLAY THE EMPLOYEE DETAILS WITH THEIR MANAGER NAMES.
SELECT emp.employee_id,emp.first_name,emp.last_name,J.DESIGNATION,
		DATEDIFF(YEAR,[HIRE-DATE],GETDATE()) AS WORK_EX,emp.SALARY,emp.MANAGER_ID
FROM EMPLOYEE AS emp
INNER JOIN JOB AS J ON J.JOB_ID=emp.JOB_ID

--13    DISPLAY ALL EMPLOYEES IN SALES OR OPERATION DEPARTMENTS.
SELECT emp.EMPLOYEE_ID,DEPT.DEPARTMENT_ID,emp.FIRST_NAME,emp.LAST_NAME,dept.D_NAME
FROM EMPLOYEE AS emp
INNER JOIN DEPARTMENT AS dept ON dept.DEPARTMENT_ID=emp.DEPARTMENT_ID
WHERE dept.D_NAME='SALES' OR dept.D_NAME='OPERATIONS'


--SET OPERATORS

--01 LIST OUT THE DISTINCT JOBS IN SALES AND ACCOUNTING DEPARTMENT

SELECT DISTINCT(J.DESIGNATION),dept.D_NAME,emp.SALARY
FROM EMPLOYEE AS emp 
INNER JOIN JOB AS J ON J.JOB_ID=emp.JOB_ID
INNER JOIN DEPARTMENT AS dept ON dept.DEPARTMENT_ID=emp.DEPARTMENT_ID
WHERE dept.D_NAME ='sales' OR dept.D_NAME ='ACCOUNTING'

--02 LIST OUT ALL THE JOBS IN SALES AND ACCOUNTING DEPARTMENTS.

SELECT J.DESIGNATION,dept.D_NAME,emp.SALARY
FROM EMPLOYEE AS emp
INNER JOIN JOB AS J ON J.JOB_ID=emp.JOB_ID
INNER JOIN DEPARTMENT AS dept ON dept.DEPARTMENT_ID=emp.DEPARTMENT_ID


--SUB QUERIES

--01 DISPLAY THE EMPLOYEES LIST WHO GOT THE MAXIMUM SALARY.

DECLARE @maxsalary int = (SELECT MAX(SALARY) FROM EMPLOYEE)
SELECT * 
FROM EMPLOYEE
WHERE SALARY=@maxsalary


--02. DISPLAY THE EMPLOYEES WHO ARE WORKING IN SALES DEPARTME

SELECT * FROM
		(SELECT emp.employee_id,emp.first_name,emp.last_name,dept.D_NAME AS department
		FROM EMPLOYEE AS emp
		INNER JOIN DEPARTMENT AS dept ON dept.DEPARTMENT_ID=emp.DEPARTMENT_ID
		) AS X 
WHERE department= 'SALES'

--03 DISPLAY THE EMPLOYEES WHO ARE WORKING AS 'CLerK'


SELECT * FROM
		(SELECT emp.employee_id,emp.first_name,dept.D_NAME AS department 
		FROM EMPLOYEE AS emp
		INNER JOIN DEPARTMENT AS dept ON dept.DEPARTMENT_ID=emp.DEPARTMENT_ID
		)AS X
WHERE department='CLERK'

--04 . DISPLAY THE LIST OF EMPLOYEES WHO ARE LIVING IN "NEW YORK".

SELECT * FROM
		(SELECT emp.employee_id,emp.first_name,emp.last_name,dept.D_NAME,loc.CITY AS location
		FROM LOCATION AS loc
		INNER JOIN DEPARTMENT AS dept ON dept.LOCATION_ID=loc.LOCATION_ID
		INNER JOIN EMPLOYEE AS emp ON emp.DEPARTMENT_ID=dept.DEPARTMENT_ID
		) AS X
WHERE location='NEW YORK'

--05 FIND OUT NO. OF EMPLOYEES WORKING IN "SALES" DEPARTMENT.



SELECT * FROM 
		(SELECT COUNT(emp.employee_id) AS numberofemp,dept.D_NAME AS department
		FROM EMPLOYEE AS emp 
		INNER JOIN DEPARTMENT AS dept ON dept.DEPARTMENT_ID=emp.DEPARTMENT_ID
		GROUP BY dept.D_NAME
		) AS X
WHERE department='SALES'


--06 UPDATE THE EMPLOYEES SALARIES, WHO ARE WORKING AS CLERK ON THE BASIS OF 10%.

UPDATE EMPLOYEE
SET SALARY= SALARY*1.10
WHERE JOB_ID = (SELECT JOB_ID
				FROM JOB
				WHERE DESIGNATION='CLERK'
				)

--RESTORING UPDATED TABLE


UPDATE emp
SET emp.salary= bak.salary 
FROM EMPLOYEE AS emp 
INNER JOIN EMP_BACKUP AS bak ON bak.job_id= emp.JOB_ID
WHERE emp.JOB_ID=(SELECT JOB_ID
				FROM JOB
				WHERE DESIGNATION='CLERK'
				) --UPDATED RECORD REVERTED TO ORIGINAL, WE NEED INNER JOIN BECAUSE WE ARE USING 2 TABLES

SELECT * FROM EMP_BACKUP


--07 DELETE THE EMPLOYEES WHO ARE WORKING IN ACCOUNTING DEPARTMENT
--TAKING BACKUP BEFORE DELETING

SELECT * 
INTO LOCATION_BACKUP 
FROM LOCATION

SELECT * 
INTO DEPARTMENT_BACKUP 
FROM DEPARTMENT

SELECT * 
INTO JOB_BACKUP
FROM JOB

SELECT *
INTO EMP_BACKUP
FROM EMPLOYEE

DELETE emp
FROM EMPLOYEE AS emp
WHERE DEPARTMENT_ID= (SELECT DEPARTMENT_ID 
					FROM DEPARTMENT
					WHERE D_NAME='ACCOUNTING'
					)

--RESTORING DELETED RECORD


INSERT INTO EMPLOYEE
(EMPLOYEE_ID,LAST_NAME,FIRST_NAME,MIDDLE_NAME,JOB_ID,MANAGER_ID,[HIRE-DATE],SALARY,COMM,DEPARTMENT_ID)
SELECT EMPLOYEE_ID,LAST_NAME,FIRST_NAME,MIDDLE_NAME,JOB_ID,MANAGER_ID,[HIRE-DATE],SALARY,COMM,DEPARTMENT_ID
FROM EMP_BACKUP
WHERE DEPARTMENT_ID =(SELECT DEPARTMENT_ID 
					FROM DEPARTMENT
					WHERE D_NAME='ACCOUNTING'
					)  --DELETED RECORDS RECOVERED HERE 

--08 DISPLAY THE SECOND HIGHEST SALARY DRAWING EMPLOYEE DETAILS.

SELECT * 
FROM EMPLOYEE 
WHERE SALARY = (SELECT MAX(SALARY) 
					FROM EMPLOYEE
					WHERE SALARY < (SELECT MAX(SALARY) FROM EMPLOYEE))

--09 LIST OUT THE EMPLOYEES WHO EARN MORE THAN EVERY EMPLOYEE IN DEPARTMENT 30.

SELECT emp.employee_id,dept.department_id,emp.first_name,emp.salary
FROM EMPLOYEE AS emp
INNER JOIN DEPARTMENT AS dept ON dept.DEPARTMENT_ID = emp.DEPARTMENT_ID
WHERE EMP.DEPARTMENT_ID=30 AND SALARY =(SELECT MAX(SALARY) FROM EMPLOYEE)

--10 FIND OUT THE EMPLOYEES WHO EARN GREATER THAN THE AVERAGE SALARY FOR THEIR 
--DEPARTMENT

SELECT emp.department_id,emp.first_name,emp.SALARY
FROM EMPLOYEE AS emp 
WHERE SALARY >(SELECT AVG(SALARY) FROM EMPLOYEE)
GROUP BY emp.department_id,emp.first_name,emp.SALARY

select AVG(salary) from EMPLOYEE





























































































































































































































